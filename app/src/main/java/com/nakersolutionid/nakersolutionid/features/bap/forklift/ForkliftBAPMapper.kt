package com.nakersolutionid.nakersolutionid.features.bap.forklift

import com.nakersolutionid.nakersolutionid.data.local.utils.DocumentType
import com.nakersolutionid.nakersolutionid.data.local.utils.InspectionType
import com.nakersolutionid.nakersolutionid.data.local.utils.SubInspectionType
import com.nakersolutionid.nakersolutionid.domain.model.InspectionCheckItemDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionWithDetailsDomain
import com.nakersolutionid.nakersolutionid.domain.model.ManufacturerDomain
import com.nakersolutionid.nakersolutionid.utils.Utils

/**
 * Stores all category names as constants to prevent typos and ensure consistency for BAP.
 */
private object BAPCategory {
    const val VISUAL_CHECK = "PEMERIKSAAN VISUAL"
    const val FUNCTIONAL_TEST = "UJI FUNGSI"
}

// =================================================================================================
//                                  UI State -> Domain Model
// =================================================================================================

/**
 * Converts [ForkliftBAPReport] (from the UI) into [InspectionWithDetailsDomain] (for the data layer).
 *
 * @param currentTime The timestamp when the conversion happens, used for 'createdAt'.
 * @return An [InspectionWithDetailsDomain] object populated with data from the BAP report.
 */
fun ForkliftBAPReport.toInspectionWithDetailsDomain(currentTime: String, id: Long?): InspectionWithDetailsDomain {
    val inspectionId: Long = id ?: 0 // Will be auto-generated by the database

    val inspectionDomain = InspectionDomain(
        id = inspectionId,
        extraId = "", // Assuming no extraId for BAP, adjust if needed
        documentType = DocumentType.BAP,
        inspectionType = InspectionType.PAA,
        subInspectionType = SubInspectionType.Forklift,
        equipmentType = this.equipmentType,
        examinationType = this.examinationType,
        ownerName = this.generalData.ownerName,
        ownerAddress = this.generalData.ownerAddress,
        usageLocation = this.generalData.userInCharge,
        addressUsageLocation = null,
        driveType = null,
        serialNumber = this.technicalData.serialNumber,
        permitNumber = null, // BAP does not have permitNumber
        capacity = this.technicalData.capacityInKg,
        speed = null,
        floorServed = this.technicalData.liftingHeightInMeters,
        manufacturer = ManufacturerDomain(
            name = this.technicalData.manufacturer,
            brandOrType = this.technicalData.brandType,
            year = this.technicalData.locationAndYearOfManufacture
        ),
        createdAt = currentTime,
        reportDate = this.inspectionDate,
        status = null, // BAP does not have a final conclusion/status field
        isSynced = false
    )

    val checkItems = mutableListOf<InspectionCheckItemDomain>()
    checkItems.addAll(mapVisualCheckToDomain(this.inspectionResult.visualCheck, inspectionId))
    checkItems.addAll(mapFunctionalTestToDomain(this.inspectionResult.functionalTest, inspectionId))

    return InspectionWithDetailsDomain(
        inspection = inspectionDomain,
        checkItems = checkItems,
        findings = emptyList(),
        testResults = emptyList()
    )
}

private fun mapVisualCheckToDomain(uiState: ForkliftBAPVisualCheck, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.VISUAL_CHECK
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Fork Mengalami Cacat", status = uiState.hasForkDefects),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Name Plate Terpasang", status = uiState.isNameplateAttached),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "APAR Tersedia", status = uiState.isAparAvailable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Penandaan Kapasitas Terpasang", status = uiState.isCapacityMarkingDisplayed),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Terdapat Kebocoran Hidrolik", status = uiState.hasHydraulicLeak),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Rantai Baik", status = uiState.isChainGoodCondition)
    )
}

private fun mapFunctionalTestToDomain(uiState: ForkliftBAPFunctionalTest, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.FUNCTIONAL_TEST
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Beban Uji (kg)", status = uiState.loadTestInKg.isNotEmpty()),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Tinggi Angkat Uji (meter)", status = uiState.loadTestLiftHeightInMeters.isNotEmpty()),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Mampu Mengangkat dan Menahan", status = uiState.isAbleToLiftAndHold),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Berfungsi Dengan Baik", status = uiState.isFunctioningWell),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Ada Indikasi Retak", status = uiState.hasCrackIndication),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Stop Darurat Berfungsi", status = uiState.isEmergencyStopFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Lampu Peringatan dan Klakson Berfungsi", status = uiState.isWarningLampAndHornFunctional)
    )
}


// =================================================================================================
//                                  Domain Model -> UI State
// =================================================================================================

/**
 * Converts [InspectionWithDetailsDomain] (from the data layer) into [ForkliftBAPReport] (for the UI).
 *
 * @return A [ForkliftBAPReport] object populated with data from the domain model.
 */
fun InspectionWithDetailsDomain.toForkliftBAPReport(): ForkliftBAPReport {
    // Helper to find a boolean check item's status by category and name.
    fun findBoolItem(category: String, itemName: String): Boolean {
        return this.checkItems.find { it.category == category && it.itemName == itemName }?.status ?: false
    }

    val generalData = ForkliftBAPGeneralData(
        ownerName = this.inspection.ownerName ?: "",
        ownerAddress = this.inspection.ownerAddress ?: "",
        userInCharge = this.inspection.usageLocation ?: ""
    )

    val technicalData = ForkliftBAPTechnicalData(
        brandType = this.inspection.manufacturer?.brandOrType ?: "",
        manufacturer = this.inspection.manufacturer?.name ?: "",
        locationAndYearOfManufacture = this.inspection.manufacturer?.year ?: "",
        serialNumber = this.inspection.serialNumber ?: "",
        capacityInKg = this.inspection.capacity ?: "",
        liftingHeightInMeters = this.inspection.floorServed ?: ""
    )

    val visualCheck = ForkliftBAPVisualCheck(
        hasForkDefects = findBoolItem(BAPCategory.VISUAL_CHECK, "Fork Mengalami Cacat"),
        isNameplateAttached = findBoolItem(BAPCategory.VISUAL_CHECK, "Name Plate Terpasang"),
        isAparAvailable = findBoolItem(BAPCategory.VISUAL_CHECK, "APAR Tersedia"),
        isCapacityMarkingDisplayed = findBoolItem(BAPCategory.VISUAL_CHECK, "Penandaan Kapasitas Terpasang"),
        hasHydraulicLeak = findBoolItem(BAPCategory.VISUAL_CHECK, "Terdapat Kebocoran Hidrolik"),
        isChainGoodCondition = findBoolItem(BAPCategory.VISUAL_CHECK, "Kondisi Rantai Baik")
    )

    val functionalTest = ForkliftBAPFunctionalTest(
        loadTestInKg = "", // Need to extract this from some field or keep empty
        loadTestLiftHeightInMeters = "", // Need to extract this from some field or keep empty
        isAbleToLiftAndHold = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Mampu Mengangkat dan Menahan"),
        isFunctioningWell = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Berfungsi Dengan Baik"),
        hasCrackIndication = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Ada Indikasi Retak"),
        isEmergencyStopFunctional = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Stop Darurat Berfungsi"),
        isWarningLampAndHornFunctional = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Lampu Peringatan dan Klakson Berfungsi")
    )

    val inspectionResult = ForkliftBAPInspectionResult(
        visualCheck = visualCheck,
        functionalTest = functionalTest
    )

    return ForkliftBAPReport(
        equipmentType = this.inspection.equipmentType,
        examinationType = this.inspection.examinationType,
        inspectionDate = Utils.formatDateToIndonesian(this.inspection.createdAt ?: this.inspection.reportDate ?: ""),
        generalData = generalData,
        technicalData = technicalData,
        inspectionResult = inspectionResult
    )
}
