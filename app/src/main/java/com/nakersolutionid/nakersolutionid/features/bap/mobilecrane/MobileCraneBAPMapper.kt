package com.nakersolutionid.nakersolutionid.features.bap.mobilecrane

import com.nakersolutionid.nakersolutionid.data.local.utils.DocumentType
import com.nakersolutionid.nakersolutionid.data.local.utils.InspectionType
import com.nakersolutionid.nakersolutionid.data.local.utils.SubInspectionType
import com.nakersolutionid.nakersolutionid.domain.model.InspectionCheckItemDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionWithDetailsDomain
import com.nakersolutionid.nakersolutionid.domain.model.ManufacturerDomain
import com.nakersolutionid.nakersolutionid.utils.Utils

/**
 * Stores all category names as constants to prevent typos and ensure consistency for BAP.
 */
private object BAPCategory {
    const val VISUAL_CHECK = "PEMERIKSAAN VISUAL"
    const val FUNCTIONAL_TEST = "UJI FUNGSI"
}

// =================================================================================================
//                                  UI State -> Domain Model
// =================================================================================================

/**
 * Converts [MobileCraneBAPReport] (from the UI) into [InspectionWithDetailsDomain] (for the data layer).
 *
 * @param currentTime The timestamp when the conversion happens, used for 'createdAt'.
 * @return An [InspectionWithDetailsDomain] object populated with data from the BAP report.
 */
fun MobileCraneBAPReport.toInspectionWithDetailsDomain(currentTime: String, id: Long?): InspectionWithDetailsDomain {
    val inspectionId: Long = id ?: 0 // Will be auto-generated by the database

    val inspectionDomain = InspectionDomain(
        id = inspectionId,
        extraId = this.extraId,
        moreExtraId = this.moreExtraId,
        documentType = DocumentType.BAP,
        inspectionType = InspectionType.PAA,
        subInspectionType = SubInspectionType.Mobile_Crane,
        equipmentType = this.equipmentType,
        examinationType = this.examinationType,
        ownerName = this.generalData.ownerName,
        ownerAddress = this.generalData.ownerAddress,
        usageLocation = this.generalData.usageLocationAddress,
        addressUsageLocation = null,
        driveType = null,
        serialNumber = this.technicalData.serialNumber,
        permitNumber = this.technicalData.materialCertificateNumber,
        capacity = this.technicalData.capacity,
        speed = this.technicalData.liftingSpeed,
        floorServed = this.technicalData.maxLiftingHeight,
        manufacturer = ManufacturerDomain(
            name = this.technicalData.manufacturer,
            brandOrType = null,
            year = this.technicalData.locationAndYearOfManufacture
        ),
        createdAt = currentTime,
        reportDate = this.inspectionDate,
        status = null, // BAP does not have a final conclusion/status field
        isSynced = false
    )

    val checkItems = mutableListOf<InspectionCheckItemDomain>()
    checkItems.addAll(mapVisualCheckToDomain(this.inspectionResult.visualCheck, inspectionId))
    checkItems.addAll(mapFunctionalTestToDomain(this.inspectionResult.functionalTest, inspectionId))

    return InspectionWithDetailsDomain(
        inspection = inspectionDomain,
        checkItems = checkItems,
        findings = emptyList(),
        testResults = emptyList()
    )
}

private fun mapVisualCheckToDomain(uiState: MobileCraneBAPVisualCheck, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.VISUAL_CHECK
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Boom Mengalami Cacat", status = uiState.hasBoomDefects),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Name Plate Terpasang", status = uiState.isNameplateAttached),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Baut dan Mur Terpasang Kencang", status = uiState.areBoltsAndNutsSecure),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Sling Baik", status = uiState.isSlingGoodCondition),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Hook Baik", status = uiState.isHookGoodCondition),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Safety Latch Terpasang", status = uiState.isSafetyLatchInstalled),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Ban Baik", status = uiState.isTireGoodCondition),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Lampu Kerja Berfungsi", status = uiState.isWorkLampFunctional)
    )
}

private fun mapFunctionalTestToDomain(uiState: MobileCraneBAPFunctionalTest, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.FUNCTIONAL_TEST
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Fungsi Maju Mundur OK", status = uiState.isForwardReverseFunctionOk),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Fungsi Swing OK", status = uiState.isSwingFunctionOk),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Fungsi Hoisting OK", status = uiState.isHoistingFunctionOk),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Beban Uji (kg)", status = uiState.loadTest.loadInKg.isNotEmpty()),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Tinggi Angkat Uji (meter)", status = uiState.loadTest.liftHeightInMeters.isNotEmpty()),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Waktu Tahan Uji (detik)", status = uiState.loadTest.holdTimeInSeconds.isNotEmpty()),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Hasil Load Test Baik", status = uiState.loadTest.isResultGood),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Metode NDT", status = uiState.ndtTest.method.isNotEmpty()),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Hasil NDT Baik", status = uiState.ndtTest.isResultGood)
    )
}


// =================================================================================================
//                                  Domain Model -> UI State
// =================================================================================================

/**
 * Converts [InspectionWithDetailsDomain] (from the data layer) into [MobileCraneBAPReport] (for the UI).
 *
 * @return A [MobileCraneBAPReport] object populated with data from the domain model.
 */
fun InspectionWithDetailsDomain.toMobileCraneBAPReport(): MobileCraneBAPReport {
    // Helper to find a boolean check item's status by category and name.
    fun findBoolItem(category: String, itemName: String): Boolean {
        return this.checkItems.find { it.category == category && it.itemName == itemName }?.status ?: false
    }

    val generalData = MobileCraneBAPGeneralData(
        ownerName = this.inspection.ownerName ?: "",
        ownerAddress = this.inspection.ownerAddress ?: "",
        usageLocationAddress = this.inspection.usageLocation ?: ""
    )

    val technicalData = MobileCraneBAPTechnicalData(
        manufacturer = this.inspection.manufacturer?.name ?: "",
        locationAndYearOfManufacture = this.inspection.manufacturer?.year ?: "",
        serialNumber = this.inspection.serialNumber ?: "",
        capacity = this.inspection.capacity ?: "",
        maxLiftingHeight = this.inspection.floorServed ?: "",
        materialCertificateNumber = this.inspection.permitNumber ?: "",
        liftingSpeed = this.inspection.speed ?: ""
    )

    val visualCheck = MobileCraneBAPVisualCheck(
        hasBoomDefects = findBoolItem(BAPCategory.VISUAL_CHECK, "Boom Mengalami Cacat"),
        isNameplateAttached = findBoolItem(BAPCategory.VISUAL_CHECK, "Name Plate Terpasang"),
        areBoltsAndNutsSecure = findBoolItem(BAPCategory.VISUAL_CHECK, "Baut dan Mur Terpasang Kencang"),
        isSlingGoodCondition = findBoolItem(BAPCategory.VISUAL_CHECK, "Kondisi Sling Baik"),
        isHookGoodCondition = findBoolItem(BAPCategory.VISUAL_CHECK, "Kondisi Hook Baik"),
        isSafetyLatchInstalled = findBoolItem(BAPCategory.VISUAL_CHECK, "Safety Latch Terpasang"),
        isTireGoodCondition = findBoolItem(BAPCategory.VISUAL_CHECK, "Kondisi Ban Baik"),
        isWorkLampFunctional = findBoolItem(BAPCategory.VISUAL_CHECK, "Lampu Kerja Berfungsi")
    )

    val loadTest = MobileCraneBAPLoadTest(
        loadInKg = "", // Need to extract this from some field or keep empty
        liftHeightInMeters = "", // Need to extract this from some field or keep empty
        holdTimeInSeconds = "", // Need to extract this from some field or keep empty
        isResultGood = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Hasil Load Test Baik")
    )

    val ndtTest = MobileCraneBAPNdtTest(
        method = "", // Need to extract this from some field or keep empty
        isResultGood = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Hasil NDT Baik")
    )

    val functionalTest = MobileCraneBAPFunctionalTest(
        isForwardReverseFunctionOk = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Fungsi Maju Mundur OK"),
        isSwingFunctionOk = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Fungsi Swing OK"),
        isHoistingFunctionOk = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Fungsi Hoisting OK"),
        loadTest = loadTest,
        ndtTest = ndtTest
    )

    val inspectionResult = MobileCraneBAPInspectionResult(
        visualCheck = visualCheck,
        functionalTest = functionalTest
    )

    val signature = MobileCraneBAPSignature(
        companyName = "" // Keep empty or extract from somewhere
    )

    return MobileCraneBAPReport(
        extraId = this.inspection.extraId,
        moreExtraId = this.inspection.moreExtraId,
        equipmentType = this.inspection.equipmentType,
        examinationType = this.inspection.examinationType,
        inspectionDate = Utils.formatDateToIndonesian(this.inspection.createdAt ?: this.inspection.reportDate ?: ""),
        generalData = generalData,
        technicalData = technicalData,
        inspectionResult = inspectionResult,
        signature = signature
    )
}
