package com.nakersolutionid.nakersolutionid.features.bap.escalator

import com.nakersolutionid.nakersolutionid.data.local.utils.DocumentType
import com.nakersolutionid.nakersolutionid.data.local.utils.InspectionType
import com.nakersolutionid.nakersolutionid.data.local.utils.SubInspectionType
import com.nakersolutionid.nakersolutionid.domain.model.InspectionCheckItemDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionWithDetailsDomain
import com.nakersolutionid.nakersolutionid.domain.model.ManufacturerDomain
import com.nakersolutionid.nakersolutionid.utils.Utils

/**
 * Stores all category names as constants to prevent typos and ensure consistency for BAP.
 */
private object BAPCategory {
    const val VISUAL_INSPECTION = "PEMERIKSAAN VISUAL"
    const val TESTING = "PENGUJIAN"
}

// =================================================================================================
//                                  UI State -> Domain Model
// =================================================================================================

/**
 * Converts [EscalatorBAPReport] (from the UI) into [InspectionWithDetailsDomain] (for the data layer).
 *
 * @param currentTime The timestamp when the conversion happens, used for 'createdAt'.
 * @return An [InspectionWithDetailsDomain] object populated with data from the BAP report.
 */
fun EscalatorBAPReport.toInspectionWithDetailsDomain(currentTime: String, id: Long?): InspectionWithDetailsDomain {
    val inspectionId: Long = id ?: 0 // Will be auto-generated by the database

    val inspectionDomain = InspectionDomain(
        id = inspectionId,
        extraId = "", // Assuming no extraId for BAP, adjust if needed
        documentType = DocumentType.BAP,
        inspectionType = InspectionType.EE,
        subInspectionType = SubInspectionType.Escalator,
        equipmentType = this.equipmentType,
        examinationType = this.examinationType,
        ownerName = this.generalData.ownerName,
        ownerAddress = this.generalData.companyLocation,
        usageLocation = this.generalData.nameUsageLocation,
        addressUsageLocation = this.generalData.locationUsageLocation,
        driveType = null, // Escalator does not have driveType
        serialNumber = this.technicalData.serialNumber,
        permitNumber = null, // BAP does not have permitNumber
        capacity = this.technicalData.capacity,
        speed = this.technicalData.speed,
        floorServed = this.technicalData.transports,
        manufacturer = ManufacturerDomain(
            name = this.technicalData.manufacturer,
            brandOrType = this.technicalData.brand,
            year = this.technicalData.countryAndYear
        ),
        createdAt = currentTime,
        reportDate = this.inspectionDate,
        status = null, // BAP does not have a final conclusion/status field
        isSynced = false
    )

    val checkItems = mutableListOf<InspectionCheckItemDomain>()
    checkItems.addAll(mapVisualInspectionToDomain(this.visualInspection, inspectionId))
    checkItems.addAll(mapTestingToDomain(this.testing, inspectionId))

    return InspectionWithDetailsDomain(
        inspection = inspectionDomain,
        checkItems = checkItems,
        findings = emptyList(), // BAP UI state does not include findings
        testResults = emptyList() // BAP UI state does not include test results
    )
}

private fun mapVisualInspectionToDomain(uiState: EscalatorBAPVisualInspection, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.VISUAL_INSPECTION
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Ruang Mesin Memenuhi Syarat", status = uiState.isMachineRoomConditionAcceptable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Panel Dapat Diterima", status = uiState.isPanelConditionAcceptable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Penerangan Dapat Diterima", status = uiState.isLightingConditionAcceptable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Rambu-rambu Keselamatan Tersedia", status = uiState.areSafetySignsAvailable)
    )
}

private fun mapTestingToDomain(uiState: EscalatorBAPTesting, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.TESTING
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "NDT Thermograph Panel OK", status = uiState.isNdtThermographPanelOk),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Alat Pengaman Berfungsi", status = uiState.areSafetyDevicesFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Limit Switch Berfungsi", status = uiState.isLimitSwitchFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Saklar Pintu Berfungsi", status = uiState.isDoorSwitchFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Stop Darurat 'Pit' Tersedia", status = uiState.isPitEmergencyStopAvailable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Stop Darurat 'Pit' Berfungsi", status = uiState.isPitEmergencyStopFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Fungsi Escalator OK", status = uiState.isEscalatorFunctionOk)
    )
}


// =================================================================================================
//                                  Domain Model -> UI State
// =================================================================================================

/**
 * Converts [InspectionWithDetailsDomain] (from the data layer) into [EscalatorBAPReport] (for the UI).
 *
 * @return An [EscalatorBAPReport] object populated with data from the domain model.
 */
fun InspectionWithDetailsDomain.toEscalatorBAPReport(): EscalatorBAPReport {
    // Helper to find a boolean check item's status by category and name.
    fun findBoolItem(category: String, itemName: String): Boolean {
        return this.checkItems.find { it.category == category && it.itemName == itemName }?.status ?: false
    }

    val generalData = EscalatorBAPGeneralData(
        ownerName = this.inspection.ownerName ?: "",
        companyLocation = this.inspection.ownerAddress ?: "",
        nameUsageLocation = this.inspection.usageLocation ?: "",
        locationUsageLocation = this.inspection.addressUsageLocation ?: ""
    )

    val technicalData = EscalatorBAPTechnicalData(
        manufacturer = this.inspection.manufacturer?.name ?: "",
        brand = this.inspection.manufacturer?.brandOrType ?: "",
        countryAndYear = this.inspection.manufacturer?.year ?: "",
        serialNumber = this.inspection.serialNumber ?: "",
        capacity = this.inspection.capacity ?: "",
        speed = this.inspection.speed ?: "",
        transports = this.inspection.floorServed ?: ""
    )

    val visualInspection = EscalatorBAPVisualInspection(
        isMachineRoomConditionAcceptable = findBoolItem(BAPCategory.VISUAL_INSPECTION, "Kondisi Ruang Mesin Memenuhi Syarat"),
        isPanelConditionAcceptable = findBoolItem(BAPCategory.VISUAL_INSPECTION, "Kondisi Panel Dapat Diterima"),
        isLightingConditionAcceptable = findBoolItem(BAPCategory.VISUAL_INSPECTION, "Kondisi Penerangan Dapat Diterima"),
        areSafetySignsAvailable = findBoolItem(BAPCategory.VISUAL_INSPECTION, "Rambu-rambu Keselamatan Tersedia")
    )

    val testing = EscalatorBAPTesting(
        isNdtThermographPanelOk = findBoolItem(BAPCategory.TESTING, "NDT Thermograph Panel OK"),
        areSafetyDevicesFunctional = findBoolItem(BAPCategory.TESTING, "Alat Pengaman Berfungsi"),
        isLimitSwitchFunctional = findBoolItem(BAPCategory.TESTING, "Limit Switch Berfungsi"),
        isDoorSwitchFunctional = findBoolItem(BAPCategory.TESTING, "Saklar Pintu Berfungsi"),
        isPitEmergencyStopAvailable = findBoolItem(BAPCategory.TESTING, "Stop Darurat 'Pit' Tersedia"),
        isPitEmergencyStopFunctional = findBoolItem(BAPCategory.TESTING, "Stop Darurat 'Pit' Berfungsi"),
        isEscalatorFunctionOk = findBoolItem(BAPCategory.TESTING, "Fungsi Escalator OK")
    )

    return EscalatorBAPReport(
        equipmentType = this.inspection.equipmentType,
        examinationType = this.inspection.examinationType,
        inspectionDate = Utils.formatDateToIndonesian(this.inspection.createdAt ?: this.inspection.reportDate ?: ""),
        generalData = generalData,
        technicalData = technicalData,
        visualInspection = visualInspection,
        testing = testing
    )
}
