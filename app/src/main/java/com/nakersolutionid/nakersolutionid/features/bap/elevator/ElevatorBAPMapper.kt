package com.nakersolutionid.nakersolutionid.features.bap.elevator

import com.nakersolutionid.nakersolutionid.data.local.utils.DocumentType
import com.nakersolutionid.nakersolutionid.data.local.utils.InspectionType
import com.nakersolutionid.nakersolutionid.data.local.utils.SubInspectionType
import com.nakersolutionid.nakersolutionid.domain.model.InspectionCheckItemDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionWithDetailsDomain
import com.nakersolutionid.nakersolutionid.domain.model.ManufacturerDomain
import com.nakersolutionid.nakersolutionid.utils.Utils

/**
 * Stores all category names as constants to prevent typos and ensure consistency for BAP.
 */
private object BAPCategory {
    const val VISUAL_INSPECTION = "PEMERIKSAAN VISUAL"
    const val TESTING = "PENGUJIAN"
}

// =================================================================================================
//                                  UI State -> Domain Model
// =================================================================================================

/**
 * Converts [ElevatorBAPReport] (from the UI) into [InspectionWithDetailsDomain] (for the data layer).
 *
 * @param currentTime The timestamp when the conversion happens, used for 'createdAt'.
 * @return An [InspectionWithDetailsDomain] object populated with data from the BAP report.
 */
fun ElevatorBAPReport.toInspectionWithDetailsDomain(currentTime: String, id: Long?): InspectionWithDetailsDomain {
    val inspectionId: Long = id ?: 0 // Will be auto-generated by the database

    val inspectionDomain = InspectionDomain(
        id = inspectionId,
        extraId = this.extraId,
        moreExtraId = this.moreExtraId,
        documentType = DocumentType.BAP,
        inspectionType = InspectionType.EE,
        subInspectionType = SubInspectionType.Elevator,
        equipmentType = this.equipmentType,
        examinationType = this.examinationType,
        ownerName = this.generalData.ownerName,
        ownerAddress = this.generalData.ownerAddress,
        usageLocation = this.generalData.nameUsageLocation,
        addressUsageLocation = this.generalData.addressUsageLocation,
        driveType = this.technicalData.elevatorType,
        serialNumber = this.technicalData.serialNumber,
        permitNumber = null, // BAP does not have permitNumber
        capacity = this.technicalData.capacity,
        speed = this.technicalData.speed,
        floorServed = this.technicalData.floorsServed,
        manufacturer = ManufacturerDomain(
            name = this.technicalData.manufacturerOrInstaller,
            brandOrType = this.technicalData.brandOrType,
            year = this.technicalData.countryAndYear
        ),
        createdAt = currentTime,
        reportDate = this.inspectionDate,
        status = null, // BAP does not have a final conclusion/status field
        isSynced = false
    )

    val checkItems = mutableListOf<InspectionCheckItemDomain>()
    checkItems.addAll(mapVisualInspectionToDomain(this.visualInspection, inspectionId))
    checkItems.addAll(mapTestingToDomain(this.testing, inspectionId))

    return InspectionWithDetailsDomain(
        inspection = inspectionDomain,
        checkItems = checkItems,
        findings = emptyList(), // BAP UI state does not include findings
        testResults = emptyList() // BAP UI state does not include test results
    )
}

// --- Helper Functions for UI State -> Domain ---

private fun mapVisualInspectionToDomain(uiState: ElevatorBAPVisualInspection, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.VISUAL_INSPECTION
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Ruang Mesin Memenuhi Syarat", status = uiState.isMachineRoomConditionAcceptable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Panel Baik", status = uiState.isPanelGoodCondition),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "APAR Tersedia di Ruang Panel", status = uiState.isAparAvailableInPanelRoom),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Penerangan Baik", status = uiState.lightingCondition),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Tangga 'Pit' Tersedia", status = uiState.isPitLadderAvailable)
    )
}

private fun mapTestingToDomain(uiState: ElevatorBAPTesting, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.TESTING
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "NDT Thermograph Panel OK", status = uiState.isNdtThermographPanelOk),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "ARD Berfungsi", status = uiState.isArdFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Governor Berfungsi", status = uiState.isGovernorFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Sling OK (oleh Tester)", status = uiState.isSlingConditionOkByTester),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Tes Limit Switch OK", status = uiState.limitSwitchTest),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Saklar Pintu Berfungsi", status = uiState.isDoorSwitchFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Status Stop Darurat 'Pit' OK", status = uiState.pitEmergencyStopStatus),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Interkom Berfungsi", status = uiState.isIntercomFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Saklar Pemadam Kebakaran Berfungsi", status = uiState.isFiremanSwitchFunctional)
    )
}


// =================================================================================================
//                                  Domain Model -> UI State
// =================================================================================================

/**
 * Converts [InspectionWithDetailsDomain] (from the data layer) into [ElevatorBAPReport] (for the UI).
 *
 * @return An [ElevatorBAPReport] object populated with data from the domain model.
 */
fun InspectionWithDetailsDomain.toElevatorBAPReport(): ElevatorBAPReport {
    // Helper to find a boolean check item's status by category and name.
    fun findBoolItem(category: String, itemName: String): Boolean {
        return this.checkItems.find { it.category == category && it.itemName == itemName }?.status ?: false
    }

    val generalData = ElevatorBAPGeneralData(
        ownerName = this.inspection.ownerName ?: "",
        ownerAddress = this.inspection.ownerAddress ?: "",
        nameUsageLocation = this.inspection.usageLocation ?: "",
        addressUsageLocation = this.inspection.addressUsageLocation ?: ""
    )

    val technicalData = ElevatorBAPTechnicalData(
        elevatorType = this.inspection.driveType ?: "",
        manufacturerOrInstaller = this.inspection.manufacturer?.name ?: "",
        brandOrType = this.inspection.manufacturer?.brandOrType ?: "",
        countryAndYear = this.inspection.manufacturer?.year ?: "",
        serialNumber = this.inspection.serialNumber ?: "",
        capacity = this.inspection.capacity ?: "",
        speed = this.inspection.speed ?: "",
        floorsServed = this.inspection.floorServed ?: ""
    )

    val visualInspection = ElevatorBAPVisualInspection(
        isMachineRoomConditionAcceptable = findBoolItem(BAPCategory.VISUAL_INSPECTION, "Kondisi Ruang Mesin Memenuhi Syarat"),
        isPanelGoodCondition = findBoolItem(BAPCategory.VISUAL_INSPECTION, "Kondisi Panel Baik"),
        isAparAvailableInPanelRoom = findBoolItem(BAPCategory.VISUAL_INSPECTION, "APAR Tersedia di Ruang Panel"),
        lightingCondition = findBoolItem(BAPCategory.VISUAL_INSPECTION, "Kondisi Penerangan Baik"),
        isPitLadderAvailable = findBoolItem(BAPCategory.VISUAL_INSPECTION, "Tangga 'Pit' Tersedia")
    )

    val testing = ElevatorBAPTesting(
        isNdtThermographPanelOk = findBoolItem(BAPCategory.TESTING, "NDT Thermograph Panel OK"),
        isArdFunctional = findBoolItem(BAPCategory.TESTING, "ARD Berfungsi"),
        isGovernorFunctional = findBoolItem(BAPCategory.TESTING, "Governor Berfungsi"),
        isSlingConditionOkByTester = findBoolItem(BAPCategory.TESTING, "Kondisi Sling OK (oleh Tester)"),
        limitSwitchTest = findBoolItem(BAPCategory.TESTING, "Tes Limit Switch OK"),
        isDoorSwitchFunctional = findBoolItem(BAPCategory.TESTING, "Saklar Pintu Berfungsi"),
        pitEmergencyStopStatus = findBoolItem(BAPCategory.TESTING, "Status Stop Darurat 'Pit' OK"),
        isIntercomFunctional = findBoolItem(BAPCategory.TESTING, "Interkom Berfungsi"),
        isFiremanSwitchFunctional = findBoolItem(BAPCategory.TESTING, "Saklar Pemadam Kebakaran Berfungsi")
    )

    return ElevatorBAPReport(
        extraId = this.inspection.extraId,
        moreExtraId = this.inspection.moreExtraId,
        equipmentType = this.inspection.equipmentType,
        examinationType = this.inspection.examinationType,
        inspectionDate = Utils.formatDateToIndonesian(this.inspection.createdAt ?: this.inspection.reportDate ?: ""),
        generalData = generalData,
        technicalData = technicalData,
        visualInspection = visualInspection,
        testing = testing
    )
}