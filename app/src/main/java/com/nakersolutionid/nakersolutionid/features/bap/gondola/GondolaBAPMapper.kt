package com.nakersolutionid.nakersolutionid.features.bap.gondola

import com.nakersolutionid.nakersolutionid.data.local.utils.DocumentType
import com.nakersolutionid.nakersolutionid.data.local.utils.InspectionType
import com.nakersolutionid.nakersolutionid.data.local.utils.SubInspectionType
import com.nakersolutionid.nakersolutionid.domain.model.InspectionCheckItemDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionDomain
import com.nakersolutionid.nakersolutionid.domain.model.InspectionWithDetailsDomain
import com.nakersolutionid.nakersolutionid.domain.model.ManufacturerDomain

/**
 * Stores all category names as constants to prevent typos and ensure consistency for BAP.
 */
private object BAPCategory {
    const val VISUAL_CHECK = "PEMERIKSAAN VISUAL"
    const val FUNCTIONAL_TEST = "UJI FUNGSI"
}

// =================================================================================================
//                                  UI State -> Domain Model
// =================================================================================================

/**
 * Converts [GondolaBAPReport] (from the UI) into [InspectionWithDetailsDomain] (for the data layer).
 *
 * @param currentTime The timestamp when the conversion happens, used for 'createdAt'.
 * @return An [InspectionWithDetailsDomain] object populated with data from the BAP report.
 */
fun GondolaBAPReport.toInspectionWithDetailsDomain(currentTime: String): InspectionWithDetailsDomain {
    val inspectionId: Long = 0 // Will be auto-generated by the database

    val inspectionDomain = InspectionDomain(
        id = inspectionId,
        extraId = "", // Assuming no extraId for BAP, adjust if needed
        documentType = DocumentType.BAP,
        inspectionType = InspectionType.PAA,
        subInspectionType = SubInspectionType.Gondola,
        equipmentType = this.equipmentType,
        examinationType = this.examinationType,
        ownerName = this.generalData.companyName,
        ownerAddress = this.generalData.ownerAddress,
        usageLocation = this.generalData.companyLocation,
        addressUsageLocation = this.generalData.userInCharge,
        driveType = null,
        serialNumber = this.technicalData.serialNumber,
        permitNumber = null, // BAP does not have permitNumber
        capacity = this.technicalData.capacity,
        speed = null,
        floorServed = this.technicalData.maxLiftingHeightInMeters,
        manufacturer = ManufacturerDomain(
            name = this.technicalData.manufacturer,
            brandOrType = this.technicalData.intendedUse,
            year = this.technicalData.locationAndYearOfManufacture
        ),
        createdAt = currentTime,
        reportDate = this.inspectionDate,
        status = null, // BAP does not have a final conclusion/status field
        isSynced = false
    )

    val checkItems = mutableListOf<InspectionCheckItemDomain>()
    checkItems.addAll(mapVisualCheckToDomain(this.inspectionResult.visualCheck, inspectionId))
    checkItems.addAll(mapFunctionalTestToDomain(this.inspectionResult.functionalTest, inspectionId))

    return InspectionWithDetailsDomain(
        inspection = inspectionDomain,
        checkItems = checkItems,
        findings = emptyList(),
        testResults = emptyList()
    )
}

private fun mapVisualCheckToDomain(uiState: GondolaBAPVisualCheck, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.VISUAL_CHECK
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Diameter Sling Dapat Diterima", status = uiState.isSlingDiameterAcceptable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Bumper Terpasang", status = uiState.isBumperInstalled),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Penandaan Kapasitas Terpasang", status = uiState.isCapacityMarkingDisplayed),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Kondisi Platform Dapat Diterima", status = uiState.isPlatformConditionAcceptable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Motor Penggerak Kondisi Baik", status = uiState.driveMotorCondition.isGoodCondition),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Terdapat Kebocoran Oli Motor", status = uiState.driveMotorCondition.hasOilLeak),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Panel Kontrol Bersih", status = uiState.isControlPanelClean),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Body Harness Tersedia", status = uiState.isBodyHarnessAvailable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Lifeline Tersedia", status = uiState.isLifelineAvailable),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Label Tombol Terpasang", status = uiState.isButtonLabelsDisplayed)
    )
}

private fun mapFunctionalTestToDomain(uiState: GondolaBAPFunctionalTest, inspectionId: Long): List<InspectionCheckItemDomain> {
    val cat = BAPCategory.FUNCTIONAL_TEST
    return listOf(
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Pengukuran Wire Rope OK", status = uiState.isWireRopeMeasurementOk),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Fungsi Naik Turun OK", status = uiState.isUpDownFunctionOk),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Fungsi Motor Penggerak OK", status = uiState.isDriveMotorFunctionOk),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Stop Darurat Berfungsi", status = uiState.isEmergencyStopFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Safety Lifeline Berfungsi", status = uiState.isSafetyLifelineFunctional),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Metode NDT", status = uiState.ndtTest.method.isNotEmpty()),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Hasil NDT Baik", status = uiState.ndtTest.isResultGood),
        InspectionCheckItemDomain(inspectionId = inspectionId, category = cat, itemName = "Ada Indikasi Retak", status = uiState.ndtTest.hasCrackIndication)
    )
}


// =================================================================================================
//                                  Domain Model -> UI State
// =================================================================================================

/**
 * Converts [InspectionWithDetailsDomain] (from the data layer) into [GondolaBAPReport] (for the UI).
 *
 * @return A [GondolaBAPReport] object populated with data from the domain model.
 */
fun InspectionWithDetailsDomain.toGondolaBAPReport(): GondolaBAPReport {
    // Helper to find a boolean check item's status by category and name.
    fun findBoolItem(category: String, itemName: String): Boolean {
        return this.checkItems.find { it.category == category && it.itemName == itemName }?.status ?: false
    }

    val generalData = GondolaBAPGeneralData(
        companyName = this.inspection.ownerName ?: "",
        companyLocation = this.inspection.usageLocation ?: "",
        userInCharge = this.inspection.addressUsageLocation ?: "",
        ownerAddress = this.inspection.ownerAddress ?: ""
    )

    val technicalData = GondolaBAPTechnicalData(
        manufacturer = this.inspection.manufacturer?.name ?: "",
        locationAndYearOfManufacture = this.inspection.manufacturer?.year ?: "",
        serialNumber = this.inspection.serialNumber ?: "",
        intendedUse = this.inspection.manufacturer?.brandOrType ?: "",
        capacity = this.inspection.capacity ?: "",
        maxLiftingHeightInMeters = this.inspection.floorServed ?: ""
    )

    val driveMotorCondition = GondolaBAPDriveMotorCondition(
        isGoodCondition = findBoolItem(BAPCategory.VISUAL_CHECK, "Motor Penggerak Kondisi Baik"),
        hasOilLeak = findBoolItem(BAPCategory.VISUAL_CHECK, "Terdapat Kebocoran Oli Motor")
    )

    val visualCheck = GondolaBAPVisualCheck(
        isSlingDiameterAcceptable = findBoolItem(BAPCategory.VISUAL_CHECK, "Diameter Sling Dapat Diterima"),
        isBumperInstalled = findBoolItem(BAPCategory.VISUAL_CHECK, "Bumper Terpasang"),
        isCapacityMarkingDisplayed = findBoolItem(BAPCategory.VISUAL_CHECK, "Penandaan Kapasitas Terpasang"),
        isPlatformConditionAcceptable = findBoolItem(BAPCategory.VISUAL_CHECK, "Kondisi Platform Dapat Diterima"),
        driveMotorCondition = driveMotorCondition,
        isControlPanelClean = findBoolItem(BAPCategory.VISUAL_CHECK, "Panel Kontrol Bersih"),
        isBodyHarnessAvailable = findBoolItem(BAPCategory.VISUAL_CHECK, "Body Harness Tersedia"),
        isLifelineAvailable = findBoolItem(BAPCategory.VISUAL_CHECK, "Lifeline Tersedia"),
        isButtonLabelsDisplayed = findBoolItem(BAPCategory.VISUAL_CHECK, "Label Tombol Terpasang")
    )

    val ndtTest = GondolaBAPNdtTest(
        method = "", // Need to extract this from some field or keep empty
        isResultGood = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Hasil NDT Baik"),
        hasCrackIndication = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Ada Indikasi Retak")
    )

    val functionalTest = GondolaBAPFunctionalTest(
        isWireRopeMeasurementOk = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Pengukuran Wire Rope OK"),
        isUpDownFunctionOk = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Fungsi Naik Turun OK"),
        isDriveMotorFunctionOk = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Fungsi Motor Penggerak OK"),
        isEmergencyStopFunctional = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Stop Darurat Berfungsi"),
        isSafetyLifelineFunctional = findBoolItem(BAPCategory.FUNCTIONAL_TEST, "Safety Lifeline Berfungsi"),
        ndtTest = ndtTest
    )

    val inspectionResult = GondolaBAPInspectionResult(
        visualCheck = visualCheck,
        functionalTest = functionalTest
    )

    return GondolaBAPReport(
        equipmentType = this.inspection.equipmentType,
        examinationType = this.inspection.examinationType,
        inspectionDate = this.inspection.reportDate ?: "",
        generalData = generalData,
        technicalData = technicalData,
        inspectionResult = inspectionResult
    )
}
